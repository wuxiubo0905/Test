name: upx releases
on:
  watch:
    types: started
  repository_dispatch:
    types: build

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-cross:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-linux

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        run: |
          bash <(curl --proto '=https' --tlsv1.2 -sS ${{ secrets.rustup }}) ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      - name: Build ${{ matrix.target }}
        timeout-minutes: 120
        run: |
          git clone https://github.com/upx/upx
          cd upx
          upx_version="$(git describe --tags `git rev-list --tags --max-count=1`)"
          echo upx_version="$upx_version" >> "$GITHUB_ENV"
          git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
          cd build
          ./build-release -t ${{ matrix.target }} -f 'local-redir,local-tun'
          cd release
          sha256sum upx-$upx_version.${{ matrix.target }}.tar.xz > upx-$upx_version.${{ matrix.target }}.tar.xz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: upx-${{ env.upx_version }}.${{ matrix.target }}
          path: upx/build/release/upx-${{ env.upx_version }}.${{ matrix.target }}.tar.xz

      - name: Create release
        continue-on-error: true
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.upx_version }}
          allowUpdates: true
          replacesArtifacts: true
          commit: main
          tag: ${{ env.upx_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: upx/build/release/upx-${{ env.upx_version }}.${{ matrix.target }}.tar.xz,upx/build/release/upx-${{ env.upx_version }}.${{ matrix.target }}.tar.xz.sha256
