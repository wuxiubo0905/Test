#
# Description: Auto update package
#
name: "T2 test"

on:
  push:
    paths:
      - '.github/workflows/Test.v2.yml'
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:
    inputs:
      packages:
        description: 'packages'
        required: false
        default: ''
permissions:
  contents: write

env:
  TZ: Asia/Shanghai

jobs:
  job_init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Initialization environment
        run: |
          sudo timedatectl set-timezone "$TZ"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 0
        
      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@master
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

  job_update_package:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: Auto-update-${{ matrix.pakcages }} 
    strategy:
      fail-fast: false
      matrix:
        pakcages: [chinadns-ng@aarch64-linux-musl@generic+v8a@fast+lto, chinadns-ng@arm-linux-musleabi@generic+v7a@fast+lto, chinadns-ng@arm-linux-musleabihf@generic+v7a@fast+lto, chinadns-ng@mips-linux-musl@mips32@fast+lto, chinadns-ng@mipsel-linux-musl@mips32@fast+lto, chinadns-ng@i386-linux-musl@i686@fast+lto, chinadns-ng@x86_64-linux-musl@x86_64@fast+lto]
        include:
          - pakcages: chinadns-ng@aarch64-linux-musl@generic+v8a@fast+lto
            folder: chinadns-ng
            version_head: PKG_VERSION:=
            hash_head: \  PKG_HASH:=
            version_line:
            hash_line: 16
            release_api_command: curl -sL "https://api.github.com/repos/zfl9/chinadns-ng/releases" | jq -r 'map(select(.prerelease|not)) | first | .tag_name' | sed -e 's/.*v//'
            release_download_url: https://github.com/zfl9/chinadns-ng/releases/download/
            file_name: /chinadns-ng@aarch64-linux-musl@generic+v8a@fast+lto

          - pakcages: chinadns-ng@arm-linux-musleabi@generic+v7a@fast+lto
            folder: chinadns-ng
            version_head: PKG_VERSION:=
            hash_head: \    PKG_HASH:=
            version_line:
            hash_line: 21
            release_api_command: curl -sL "https://api.github.com/repos/zfl9/chinadns-ng/releases" | jq -r 'map(select(.prerelease|not)) | first | .tag_name' | sed -e 's/.*v//'
            release_download_url: https://github.com/zfl9/chinadns-ng/releases/download/
            file_name: /chinadns-ng@arm-linux-musleabi@generic+v7a@fast+lto

          - pakcages: chinadns-ng@arm-linux-musleabihf@generic+v7a@fast+lto
            folder: chinadns-ng
            version_head: PKG_VERSION:=
            hash_head: \    PKG_HASH:=
            version_line:
            hash_line: 24
            release_api_command: curl -sL "https://api.github.com/repos/zfl9/chinadns-ng/releases" | jq -r 'map(select(.prerelease|not)) | first | .tag_name' | sed -e 's/.*v//'
            release_download_url: https://github.com/zfl9/chinadns-ng/releases/download/
            file_name: /chinadns-ng@arm-linux-musleabihf@generic+v7a@fast+lto

          - pakcages: chinadns-ng@mips-linux-musl@mips32@fast+lto
            folder: chinadns-ng
            version_head: PKG_VERSION:=
            hash_head: \  PKG_HASH:=
            version_line:
            hash_line: 28
            release_api_command: curl -sL "https://api.github.com/repos/zfl9/chinadns-ng/releases" | jq -r 'map(select(.prerelease|not)) | first | .tag_name' | sed -e 's/.*v//'
            release_download_url: https://github.com/zfl9/chinadns-ng/releases/download/
            file_name: /chinadns-ng@mips-linux-musl@mips32@fast+lto

          - pakcages: chinadns-ng@mipsel-linux-musl@mips32@fast+lto
            folder: chinadns-ng
            version_head: PKG_VERSION:=
            hash_head: \  PKG_HASH:=
            version_line:
            hash_line: 31
            release_api_command: curl -sL "https://api.github.com/repos/zfl9/chinadns-ng/releases" | jq -r 'map(select(.prerelease|not)) | first | .tag_name' | sed -e 's/.*v//'
            release_download_url: https://github.com/zfl9/chinadns-ng/releases/download/
            file_name: /chinadns-ng@mipsel-linux-musl@mips32@fast+lto

          - pakcages: chinadns-ng@i386-linux-musl@i686@fast+lto
            folder: chinadns-ng
            version_head: PKG_VERSION:=
            hash_head: \  PKG_HASH:=
            version_line:
            hash_line: 34
            release_api_command: curl -sL "https://api.github.com/repos/zfl9/chinadns-ng/releases" | jq -r 'map(select(.prerelease|not)) | first | .tag_name' | sed -e 's/.*v//'
            release_download_url: https://github.com/zfl9/chinadns-ng/releases/download/
            file_name: /chinadns-ng@i386-linux-musl@i686@fast+lto

          - pakcages: chinadns-ng@x86_64-linux-musl@x86_64@fast+lto
            folder: chinadns-ng
            version_head: PKG_VERSION:=
            hash_head: \  PKG_HASH:=
            version_line:
            hash_line: 36
            release_api_command: curl -sL "https://api.github.com/repos/zfl9/chinadns-ng/releases" | jq -r 'map(select(.prerelease|not)) | first | .tag_name' | sed -e 's/.*v//'
            release_download_url: https://github.com/zfl9/chinadns-ng/releases/download/
            file_name: /chinadns-ng@x86_64-linux-musl@x86_64@fast+lto

#          - pakcages: naiveproxy
#            folder: naiveproxy
#            version_line: 8
#            hash_line: 13
#            version_head: PKG_VERSION:=
#            hash_head: PKG_HASH:=
#            release_api_command: curl -sL "https://api.github.com/repos/klzgrad/naiveproxy/releases/latest" | jq -r 'map(select(.prerelease|not)) | first | .tag_name' | sed -e 's/.*v//' | awk -F 'v' '{print $2}'
#            release_download_url: https://codeload.github.com/klzgrad/naiveproxy/tar.gz/v
#            file_name: 

    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check ${{ matrix.pakcages }}
        id: check
        run: |
          is_continue=true

          if [ "$is_continue" = "true" ]; then
            cd && cd $GITHUB_WORKSPACE/${{ matrix.folder }}
            if [ ! -n "${{ matrix.version_line }}" ] ; then
              Old_PKG_VERSION=$(sed -n '/^${{ matrix.version_head }}/p' Makefile | awk -F '=' '{print $2}');
            else
              Old_PKG_VERSION=$(sed -n '${{ matrix.version_line }}p' Makefile | awk -F '=' '{print $2}');
            fi
            New_PKG_VERSION=$(${{ matrix.release_api_command }})
            echo "${{ matrix.pakcages }}目前版本: $Old_PKG_VERSION"
            echo "${{ matrix.pakcages }}最新版本: $New_PKG_VERSION"
            else 
              echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  
              echo "status=success" >> $GITHUB_OUTPUT;
            fi
          else
            echo "status=failure" >> $GITHUB_OUTPUT;
          fi

      - name: Update ${{ matrix.pakcages }}
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd $GITHUB_WORKSPACE/${{ matrix.folder }}
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          if [ ! -n "${{ matrix.version_line }}" ] ; then
            sed -i "/^${{ matrix.version_head }}/c\${{ matrix.version_head }}$New_PKG_VERSION" Makefile;
          else
            sed -i "${{ matrix.version_line }}c ${{ matrix.version_head }}$New_PKG_VERSION" Makefile;
          fi
          cd && cd main && mkdir -p ${{ matrix.pakcages }} && cd ${{ matrix.pakcages }}
          wget -P / ${{ matrix.release_download_url }}$New_PKG_VERSION${{ matrix.file_name }}
          file_name=${{ matrix.file_name }}

          is_v=$(echo ${{ matrix.release_download_url }} | awk -F/ '{print $NF}')

          if [ ! -n "${{ matrix.file_name }}" ]; then PKG_HASH=$(sha256sum $is_v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}; else PKG_HASH=$(sha256sum ${file_name##*/}) && PKG_HASH=${PKG_HASH%% *}; fi;
          cd && cd $GITHUB_WORKSPACE/${{ matrix.folder }} 
          if [ ! -n "${{ matrix.hash_line }}" ] ; then
            sed -i "/^${{ matrix.hash_head }}/c\${{ matrix.hash_head }}$PKG_HASH" Makefile;
          else
            sed -i "${{ matrix.hash_line }}c ${{ matrix.hash_head }}$PKG_HASH" Makefile;
          fi
          echo "已更新${{ matrix.pakcages }}版本到: $New_PKG_VERSION"
          echo "${{ matrix.pakcages }} Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: ${{ matrix.pakcages }}: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

          cd && cd $GITHUB_WORKSPACE
          echo "branch_exists=$(git ls-remote --heads origin patches-${{ matrix.pakcages }}-$New_PKG_VERSION | tr -d '\n')" >> $GITHUB_OUTPUT    

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@master
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "${{ matrix.pakcages }}: update to ${{ steps.update.outputs.version }}"
          branch: main
